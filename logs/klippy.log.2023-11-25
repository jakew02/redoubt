=============== Log rollover at Sat Nov 25 10:44:32 2023 ===============
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-10-gea2f6bc0-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/beacon.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core Intel(R) Core(TM) i3-4170T CPU @ 3.20GHz
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
Start printer at Sat Nov 25 10:44:33 2023 (1700927073.1 3.9)
===== Config file =====
[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	
	
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	
	
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro _CG28]
description = Home only if necessary
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro CLEAN_NOZZLE]
description = Wipe the nozzle on the brush
gcode = 
	RESPOND MSG="Nozzle cleaning..."
	
	
	{% set saved_accel = printer.toolhead.max_accel %}
	{% set saved_decel = printer.toolhead.max_accel_to_decel %}
	SET_VELOCITY_LIMIT ACCEL=1500 ACCEL_TO_DECEL=1125
	
	
	G90
	MOVE_TO_PURGE_BUCKET
	
	G1 X302 Y355 Z5 F21000
	
	
	G91
	{% for wipe in range(6) %}
	G1 Y-5 F6000
	G1 Y+5 F6000
	{% endfor %}
	
	G1 X+20 F6000
	
	{% for wipe in range(6) %}
	G1 X-40 F6000
	G1 X+40 F6000
	{% endfor %}
	
	G90
	
	
	SET_VELOCITY_LIMIT ACCEL={saved_accel} ACCEL_TO_DECEL={saved_decel}

[gcode_macro PURGE]
description = Purge a specific amount of filament ontop of the purge bucket
gcode = 
	RESPOND MSG="Purge filament..."
	
	G90
	MOVE_TO_PURGE_BUCKET
	
	
	_LOW_TEMP_CHECK T={TEMP}
	G92 E0
	G1 E30 F150
	
	
	G92 E0
	G1 E-1.7 F2100
	G1 E-18.3 F150
	G92 E0
	
	
	G4 P10000

[gcode_macro MOVE_TO_PURGE_BUCKET]
description = Move over the purge bucket
gcode = 
	
	SAVE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE
	
	G90
	G1 X332 Y355 Z5 F21000
	
	RESTORE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE

[gcode_macro PARK]
gcode = 
	{% if printer["gcode_macro status_busy"] != null %}
	status_busy
	{% endif %}
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_park_delta = 2.0 %}
	
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	G91
	G1 Z{z_safe} F900
	G90
	
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600
	{% if printer["gcode_macro status_ready"] != null %}
	status_ready
	{% endif %}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro print_end]
variable_heatbed_off = True
variable_motors_off = True
gcode = 
	SAVE_GCODE_STATE NAME=END_state
	
	
	M83
	G1 E-0.3 F4800
	
	PARK
	
	M104 S0
	{% if heatbed_off %}
	M140 S0
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=END_state
	
	M107
	{% if motors_off %}
	M84
	{% endif %}
	CLEAR_PAUSE

[gcode_macro print_start]
gcode = 
	{% set EXTRUDER = params.EXTRUDER_TEMP|default(260) %}
	{% set BED = params.BED_TEMP|default(110) %}
	
	M104 S0
	M107
	G21
	G90
	M83
	G92 E0.0
	M220 S100
	_CG28
	M140 S{BED}
	M109 S{EXTRUDER}
	M190 S{BED}
	CLEAN_NOZZLE
	QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE
	PURGE
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = _BASE_QUAD_GANTRY_LEVEL
gcode = 
	_CG28
	
	_BASE_QUAD_GANTRY_LEVEL

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	
	{% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	
	
	RESUME_BASE {get_params}

[gcode_macro _LOW_TEMP_CHECK]
description = Check the nozzle is at temperature and heat it if needed
gcode = 
	{% if printer.extruder.target != 0 %}
	{% if printer.extruder.temperature < printer.extruder.target %}
	M109 S{printer.extruder.target|float}
	{% endif %}
	{% else %}
	{% if printer.extruder.target < 245 %}
	M109 S245
	{% endif %}
	{% endif %}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_480033001351303530323539-if00

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 7
max_z_accel = 100
square_corner_velocity = 5.0

[virtual_sdcard]
path = ~/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[respond]

[force_move]
enable_force_move = True

[gcode_arcs]
resolution = 0.1

[temperature_sensor Debian]
sensor_type = temperature_host

[temperature_sensor mcu]
sensor_type = temperature_mcu

[stepper_x]
step_pin = PE1
dir_pin = PE0
enable_pin = !PC5
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^PB14
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PD11
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PD12
dir_pin = PC4
enable_pin = !PE8
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^PB13
position_min = 0
position_endstop = 355
position_max = 355
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PA15
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PE11
dir_pin = !PE10
enable_pin = !PE9
rotation_distance = 40
full_steps_per_rotation = 200
gear_ratio = 40:1
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 310
position_min = -5
homing_speed = 7
second_homing_speed = 4
homing_retract_dist = 0

[tmc2209 stepper_z]
uart_pin = PE7
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PE2
dir_pin = !PE4
enable_pin = !PE3
rotation_distance = 40
gear_ratio = 40:1
microsteps = 32
full_steps_per_rotation = 200

[tmc2209 stepper_z1]
uart_pin = PC15
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PD5
dir_pin = !PD6
enable_pin = !PD4
rotation_distance = 40
gear_ratio = 40:1
microsteps = 32
full_steps_per_rotation = 200

[tmc2209 stepper_z2]
uart_pin = PD7
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PE6
dir_pin = !PC13
enable_pin = !PE5
rotation_distance = 40
gear_ratio = 40:1
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PC14
interpolate = False
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = PD14
dir_pin = PD13
enable_pin = !PD15
rotation_distance = 11.10361446
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = PB15
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC0
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
pressure_advance = 0.045
pressure_advance_smooth_time = 0.040
max_extrude_cross_section = 5
max_extrude_only_distance = 1400.0

[tmc2209 extruder]
uart_pin = PD10
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB4
sensor_type = Generic 3950
sensor_pin = PB0
max_power = 0.6
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0167

[beacon]
serial = /dev/serial/by-id/usb-Beacon_Beacon_RevD_20A5C516515137474C202020FF0C0A26-if00
x_offset = 0
y_offset = 20
mesh_main_direction = x
mesh_runs = 2
speed = 15
lift_speed = 15
backlash_comp = 0.01349

[bed_mesh]
speed = 350
horizontal_move_z = 12
mesh_min = 25, 25
mesh_max = 325, 325
probe_count = 9, 9
fade_start = 0.6
fade_end = 10.0
algorithm = bicubic
relative_reference_index = 40

[heater_fan hotend_fan]
pin = PB2
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = PA14
off_below = 0.10

[controller_fan controller_fan]
pin = PB7
stepper = stepper_x,stepper_y,stepper_z
fan_speed = 0.5

[controller_fan host_fan]
pin = PB6
stepper = stepper_x,stepper_y,stepper_z
fan_speed = 0.5

[fan_generic filter_fan]
pin = PA13
max_power = 1.0

[output_pin caselight]
pin = PB3
pwm = true
value = 100
scale = 100
cycle_time = 0.01

[idle_timeout]
timeout = 1800

[safe_z_home]
home_xy_position = 175,175
speed = 100
z_hop = 3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 500
horizontal_move_z = 12
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	G28
	QUAD_GANTRY_LEVEL
	G28
	PARK
	RESTORE_GCODE_STATE NAME=STATE_G32

[beacon model default]
model_coef = 1.3980143648685588,
	1.7095481700991269,
	0.7475869884079284,
	0.3695855373187476,
	0.3746646859731722,
	0.3758586337098389,
	-0.15693214716196002,
	-0.3057173174843286,
	0.23714982027920234,
	0.2522961091937064
model_domain = 3.1112654421929955e-07,3.3253859346054395e-07
model_range = 0.200000,5.000000
model_temp = 86.759320
model_offset = 0.09000

[input_shaper]

[bed_mesh default]
version = 1
points = 
	0.046250, 0.046264, 0.046114, 0.040977, 0.037335, 0.042678, 0.049450
	0.046011, 0.039672, 0.038924, 0.030655, 0.028791, 0.029760, 0.038171
	0.032418, 0.024870, 0.018768, 0.011481, 0.007586, 0.014992, 0.021844
	0.020342, 0.015026, 0.010028, 0.000000, -0.003782, 0.001679, 0.013160
	0.026533, 0.016803, 0.008689, -0.000354, -0.003486, 0.008228, 0.014766
	0.052074, 0.043874, 0.031464, 0.022566, 0.018272, 0.033673, 0.031222
	0.064733, 0.053831, 0.040741, 0.027221, 0.028399, 0.032552, 0.040089
x_count = 7
y_count = 7
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 87.0
max_x = 255.0
min_y = 88.0
max_y = 262.0
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_480033001351303530323539-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_480033001351303530323539-if00'
webhooks client 140236771072592: New connection
webhooks client 140236771072592: Client info {'program': 'Moonraker', 'version': 'v0.8.0-204-gfb15b2a'}
mcu 'mcu': got {'oid': 34, 'next_clock': 3644086016, 'value': 31607, '#name': 'analog_in_state', '#sent_time': 9.640299441, '#receive_time': 9.64379854}
mcu 'mcu': got {'oid': 19, 'next_clock': 3671086016, 'value': 7497, '#name': 'analog_in_state', '#sent_time': 9.791892626, '#receive_time': 9.793787723}
mcu 'mcu': got {'oid': 20, 'next_clock': 3672886016, 'value': 31566, '#name': 'analog_in_state', '#sent_time': 9.791892626, '#receive_time': 9.80381903}
Loaded MCU 'mcu' 119 commands (v0.11.0-234-gd32a8334 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_sdio=PC12,PD2,PC8,PC9,PC10,PC11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 CLOCK_FREQ=180000000 MCU=stm32f446xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'mcu': got {'oid': 34, 'next_clock': 3698086016, 'value': 31603, '#name': 'analog_in_state', '#sent_time': 9.943263692, '#receive_time': 9.943905367}
mcu_temperature 'mcu' nominal base=-266.692913 slope=1289.763780
mcu 'beacon': Starting serial connect
mcu 'mcu': got {'oid': 19, 'next_clock': 3725086016, 'value': 7499, '#name': 'analog_in_state', '#sent_time': 9.944264283, '#receive_time': 10.093793323}
mcu 'mcu': got {'oid': 20, 'next_clock': 3726886016, 'value': 31571, '#name': 'analog_in_state', '#sent_time': 9.944264283, '#receive_time': 10.103784981}
mcu 'mcu': got {'oid': 34, 'next_clock': 3752086016, 'value': 31606, '#name': 'analog_in_state', '#sent_time': 9.944264283, '#receive_time': 10.24377799}
mcu 'mcu': got {'oid': 19, 'next_clock': 3779086016, 'value': 7496, '#name': 'analog_in_state', '#sent_time': 9.944264283, '#receive_time': 10.393772173}
mcu 'mcu': got {'oid': 20, 'next_clock': 3780886016, 'value': 31565, '#name': 'analog_in_state', '#sent_time': 9.944264283, '#receive_time': 10.403780204}
Loaded MCU 'beacon' 27 commands (Beacon 1.0.0 / )
MCU 'beacon' config: ADC_MAX=4095 BEACON_ADC_SMOOTH_COUNT=16 CLOCK_FREQ=32000000 MCU=beacon STATS_SUMSQ_BASE=256
Configured MCU 'mcu' (1024 moves)
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (25.0, 5.0)     | (25.0, 25.0)
  1   | (62.5, 5.0)     | (62.5, 25.0)
  2   | (100.0, 5.0)    | (100.0, 25.0)
  3   | (137.5, 5.0)    | (137.5, 25.0)
  4   | (175.0, 5.0)    | (175.0, 25.0)
  5   | (212.5, 5.0)    | (212.5, 25.0)
  6   | (250.0, 5.0)    | (250.0, 25.0)
  7   | (287.5, 5.0)    | (287.5, 25.0)
  8   | (325.0, 5.0)    | (325.0, 25.0)
  9   | (325.0, 42.5)   | (325.0, 62.5)
  10  | (287.5, 42.5)   | (287.5, 62.5)
  11  | (250.0, 42.5)   | (250.0, 62.5)
  12  | (212.5, 42.5)   | (212.5, 62.5)
  13  | (175.0, 42.5)   | (175.0, 62.5)
  14  | (137.5, 42.5)   | (137.5, 62.5)
  15  | (100.0, 42.5)   | (100.0, 62.5)
  16  | (62.5, 42.5)    | (62.5, 62.5)
  17  | (25.0, 42.5)    | (25.0, 62.5)
  18  | (25.0, 80.0)    | (25.0, 100.0)
  19  | (62.5, 80.0)    | (62.5, 100.0)
  20  | (100.0, 80.0)   | (100.0, 100.0)
  21  | (137.5, 80.0)   | (137.5, 100.0)
  22  | (175.0, 80.0)   | (175.0, 100.0)
  23  | (212.5, 80.0)   | (212.5, 100.0)
  24  | (250.0, 80.0)   | (250.0, 100.0)
  25  | (287.5, 80.0)   | (287.5, 100.0)
  26  | (325.0, 80.0)   | (325.0, 100.0)
  27  | (325.0, 117.5)  | (325.0, 137.5)
  28  | (287.5, 117.5)  | (287.5, 137.5)
  29  | (250.0, 117.5)  | (250.0, 137.5)
  30  | (212.5, 117.5)  | (212.5, 137.5)
  31  | (175.0, 117.5)  | (175.0, 137.5)
  32  | (137.5, 117.5)  | (137.5, 137.5)
  33  | (100.0, 117.5)  | (100.0, 137.5)
  34  | (62.5, 117.5)   | (62.5, 137.5)
  35  | (25.0, 117.5)   | (25.0, 137.5)
  36  | (25.0, 155.0)   | (25.0, 175.0)
  37  | (62.5, 155.0)   | (62.5, 175.0)
  38  | (100.0, 155.0)  | (100.0, 175.0)
  39  | (137.5, 155.0)  | (137.5, 175.0)
  40  | (175.0, 155.0)  | (175.0, 175.0)
  41  | (212.5, 155.0)  | (212.5, 175.0)
  42  | (250.0, 155.0)  | (250.0, 175.0)
  43  | (287.5, 155.0)  | (287.5, 175.0)
  44  | (325.0, 155.0)  | (325.0, 175.0)
  45  | (325.0, 192.5)  | (325.0, 212.5)
  46  | (287.5, 192.5)  | (287.5, 212.5)
  47  | (250.0, 192.5)  | (250.0, 212.5)
  48  | (212.5, 192.5)  | (212.5, 212.5)
  49  | (175.0, 192.5)  | (175.0, 212.5)
  50  | (137.5, 192.5)  | (137.5, 212.5)
  51  | (100.0, 192.5)  | (100.0, 212.5)
  52  | (62.5, 192.5)   | (62.5, 212.5)
  53  | (25.0, 192.5)   | (25.0, 212.5)
  54  | (25.0, 230.0)   | (25.0, 250.0)
  55  | (62.5, 230.0)   | (62.5, 250.0)
  56  | (100.0, 230.0)  | (100.0, 250.0)
  57  | (137.5, 230.0)  | (137.5, 250.0)
  58  | (175.0, 230.0)  | (175.0, 250.0)
  59  | (212.5, 230.0)  | (212.5, 250.0)
  60  | (250.0, 230.0)  | (250.0, 250.0)
  61  | (287.5, 230.0)  | (287.5, 250.0)
  62  | (325.0, 230.0)  | (325.0, 250.0)
  63  | (325.0, 267.5)  | (325.0, 287.5)
  64  | (287.5, 267.5)  | (287.5, 287.5)
  65  | (250.0, 267.5)  | (250.0, 287.5)
  66  | (212.5, 267.5)  | (212.5, 287.5)
  67  | (175.0, 267.5)  | (175.0, 287.5)
  68  | (137.5, 267.5)  | (137.5, 287.5)
  69  | (100.0, 267.5)  | (100.0, 287.5)
  70  | (62.5, 267.5)   | (62.5, 287.5)
  71  | (25.0, 267.5)   | (25.0, 287.5)
  72  | (25.0, 305.0)   | (25.0, 325.0)
  73  | (62.5, 305.0)   | (62.5, 325.0)
  74  | (100.0, 305.0)  | (100.0, 325.0)
  75  | (137.5, 305.0)  | (137.5, 325.0)
  76  | (175.0, 305.0)  | (175.0, 325.0)
  77  | (212.5, 305.0)  | (212.5, 325.0)
  78  | (250.0, 305.0)  | (250.0, 325.0)
  79  | (287.5, 305.0)  | (287.5, 325.0)
  80  | (325.0, 305.0)  | (325.0, 325.0)
bed_mesh: relative_reference_index 40 is (175.00, 175.00)
Configured MCU 'beacon' (0 moves)
beacon: loaded fmin=2973803.88 from nvm
beacon: loaded fmin_temp=19.36 from nvm
beacon: built tempco model {'amfg': 1.0, 'tcc': -2.1429828e-05, 'tcfl': -1.8980091e-10, 'tctl': 3.673837e-16, 'fmin': 2973803.8778305054, 'fmin_temp': 19.355615709646543}
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 140236771072592
webhooks: registering remote method 'reboot_machine' for connection id: 140236771072592
webhooks: registering remote method 'pause_job_queue' for connection id: 140236771072592
webhooks: registering remote method 'start_job_queue' for connection id: 140236771072592
mcu 'beacon': got {'oid': 0, 'can_trigger': 1, 'trigger_reason': 0, 'clock': 825, '#name': 'trsync_state', '#sent_time': 59.76019124, '#receive_time': 60.062700894}
